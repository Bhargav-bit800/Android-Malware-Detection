from fastapi import FastAPI
from sklearn import tree
import uvicorn
import pickle
import numpy as np
import pandas as pd
from Malwares import Malware 

app = FastAPI()
pickle_in = open("Classifier.pkl", "rb")
Classifier = pickle.load(pickle_in)


@app.get("/")
def read_main():
    return{"message": "Hello World"}


@app.get('/{name}')
def get_name(name: str):
    return {'message': f'Hello, {name}'}


@app.post('/predict')
def predict_malware(data: Malware):
    data = data.dict()
    print(data)
    cpu_usage = data['cpu_usage']
    print(cpu_usage)
    context_switch = data['context_switch']
    cpu_migration = data['cpu_migration']
    page_faults = data['page_faults']
    cycles_GHz = data['cycles_GHz']
    stalled_cycles_frontend_percent = data['stalled_cycles_frontend_percent']
    stalled_cycles_backend_percent = data['stalled_cycles_backend_percent']
    Instructions_per_cycle = data['Instructions_per_cycle']
    stalled_cycles_per_instruction = data['stalled_cycles_per_instruction']
    branches = data['branches']
    branch_misses_percent = data['branch_misses_percent']
    bus_cycle = data['bus_cycle']
    cache_misses_percent = data['cache_misses_percent']
    cache_references = data['cache_references']
    ref_cycles = data['ref_cycles']
    #print(Classifier.predict([[context_switch, cpu_migration, page_faults, cycles_GHz, stalled_cycles_frontend_percent, stalled_cycles_backend_percent,
                               #Instructions_per_cycle, stalled_cycles_per_instruction, branches, branch_misses_percent, bus_cycle, cache_misses_percent, cache_references, ref_cycles]]))
    prediction= Classifier.predict([[context_switch, cpu_migration, page_faults, cycles_GHz, stalled_cycles_frontend_percent, stalled_cycles_backend_percent,
                               Instructions_per_cycle, stalled_cycles_per_instruction, branches, branch_misses_percent, bus_cycle, cache_misses_percent, cache_references, ref_cycles]])
    if(prediction[7]<1):
        prediction="It's not a malicious app"
    else:
        prediction="It is a malicious app"
    return {
        'prediction': prediction
    }

if __name__ == '__main__':
    uvicorn.run(app, host='127.0.0.1', port=8000)