import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import numpy as np
import seaborn as sns
import pickle
from sklearn.svm import SVC
from sklearn.model_selection import KFold
from sklearn import preprocessing
from sklearn.utils import shuffle
#from sklearn.ensemble import ExtraTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.tree import DecisionTreeClassifier
from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
import matplotlib.pyplot as plt


data = pd.read_csv(r'C:\development\roboviticsproject\Android-Malware-Prediction-in-Machine-Learning\android.csv')
print(data)
data.shape
data = data.sample(frac=1).reset_index(drop=True)
data.head()
sns.countplot(x='malware',data=data)

#for converting imbalanced to balanced data
target_count = data.malware.value_counts()
print('class 0:', target_count[0])
print('Class 1:', target_count[1])

count_class_0, count_class_1 = data.malware.value_counts()
df_class_0 = data[data['malware'] == 0]
df_class_1 = data[data['malware'] == 1]

df_class_1_over = df_class_1.sample(count_class_0, replace=True)
df_test_over = pd.concat([df_class_0, df_class_1_over], axis=0)

df_test_over.shape
sns.countplot(x='malware',data=df_test_over)

#seperating into dependent and independent variables
X= df_test_over.iloc[:, df_test_over.columns != 'malware']
Y= df_test_over.iloc[:, df_test_over.columns == 'malware']

print(X.head())
print(Y.head())

X, Y=shuffle(X, Y)

print(X.head())
X=X.drop(columns='name')
print(X.head())
print(Y.head())

#feature selection
#bestfeatures = SelectKBest(score_func=chi2, k=10)
#fit = bestfeatures.fit(X,Y)
#dfscores = pd.DataFrame(fit.scores_)
#dfcolumns=pd.DataFrame(X.columns)
#model = ExtraTreeClassifier()
#model.fit(X,Y)
#print(model.feature_importances_)
#feat_importances = pd.Series(model.feature_importances_, index=X.columns)
#feat_importances.nlargest(10).plot(kind='barh')
#plt.show()

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.2, random_state = 0)
print(X_train.shape)
print(X_train.head())

print(Y_train.head())

#training,prediction and accuracy score

Classifier = DecisionTreeClassifier()
Classifier.fit(X_train, Y_train)
Y_pred = Classifier.predict(X_test)
print(Y_pred) 
mode12 = metrics.accuracy_score(Y_test, Y_pred)
print(mode12)

pickle_out = open("Classifier.pkl","wb")
pickle.dump(Classifier, pickle_out)
pickle_out.close()

cnf_matrix = confusion_matrix(Y_test,Y_pred)
labels = [0,1]
sns.heatmap(cnf_matrix, annot=True, cmap="BrBG", fmt=".3f",xticklabels=labels,yticklabels=labels)
plt.show


